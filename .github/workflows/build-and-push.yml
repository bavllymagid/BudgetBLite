name: Build and Push to Docker Hub

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  # Step 1: Build all services together
  build-all-services:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build entire project (including common modules)
        run: mvn clean package -DskipTests

      - name: Upload Service Discovery JAR
        uses: actions/upload-artifact@v3
        with:
          name: service-discovery-jar
          path: Service-Discovery/target/*.jar
          retention-days: 1

      - name: Upload Auth Service JAR
        uses: actions/upload-artifact@v3
        with:
          name: auth-service-jar
          path: Auth-Service/target/*.jar
          retention-days: 1

      - name: Upload Finance Service JAR
        uses: actions/upload-artifact@v3
        with:
          name: finance-service-jar
          path: Finance-Service/target/*.jar
          retention-days: 1

      - name: Upload Reporting Service JAR
        uses: actions/upload-artifact@v3
        with:
          name: reporting-service-jar
          path: Reporting-Service/target/*.jar
          retention-days: 1

  # Step 2: Build and push Docker images in parallel
  docker-build-push:
    needs: build-all-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: service-discovery
            path: Service-Discovery
            artifact: service-discovery-jar
            port: 8761
          - name: auth-service
            path: Auth-Service
            artifact: auth-service-jar
            port: 8081
          - name: finance-service
            path: Finance-Service
            artifact: finance-service-jar
            port: 8082
          - name: reporting-service
            path: Reporting-Service
            artifact: reporting-service-jar
            port: 8083
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service.artifact }}
          path: ${{ matrix.service.path }}/target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/budget-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          file: ${{ matrix.service.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/budget-${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/budget-${{ matrix.service.name }}:buildcache,mode=max

  # Step 3: Verify deployment
  verify-images:
    needs: docker-build-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify images exist
        run: |
          echo "‚úÖ Verifying Docker images..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/budget-service-discovery:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/budget-auth-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/budget-finance-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/budget-reporting-service:latest
          echo "‚úÖ All images verified successfully!"

  # Step 4: Notification
  notify:
    needs: [build-all-services, docker-build-push, verify-images]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Status
        run: |
          if [ "${{ needs.build-all-services.result }}" == "success" ] && \
             [ "${{ needs.docker-build-push.result }}" == "success" ] && \
             [ "${{ needs.verify-images.result }}" == "success" ]; then
            echo "‚úÖ BUILD SUCCESSFUL!"
            echo "üì¶ All services built and pushed to Docker Hub"
            echo "üöÄ Images available at:"
            echo "   - ${{ secrets.DOCKER_USERNAME }}/budget-service-discovery:latest"
            echo "   - ${{ secrets.DOCKER_USERNAME }}/budget-auth-service:latest"
            echo "   - ${{ secrets.DOCKER_USERNAME }}/budget-finance-service:latest"
            echo "   - ${{ secrets.DOCKER_USERNAME }}/budget-reporting-service:latest"
          else
            echo "‚ùå BUILD FAILED!"
            echo "Check the logs above for details"
            exit 1
          fi
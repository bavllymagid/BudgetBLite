services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - budget-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - budget-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9092' || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  redis:
    image: redis:7.4-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - budget-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  service-discovery:
    image: ${DOCKER_USERNAME:-bvm4}/service-discovery:latest
    container_name: service-discovery
    ports:
      - "8761:8761"
    environment:
      - PORT=8761
    networks:
      - budget-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    image: ${DOCKER_USERNAME:-bvm4}/auth-service:latest
    container_name: auth-service
    environment:
      - PORT=8081
      - DEFAULT_ZONE=http://service-discovery:8761/eureka/
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=false
      - EUREKA_INSTANCE_HOSTNAME=auth-service
      # Database configuration
      - DB_URL=${DB_URL:-jdbc:postgresql://dpg-d35vr2qli9vc738ptucg-a.frankfurt-postgres.render.com/employees_db_54tp}
      - DB_USERNAME=${DB_USERNAME:-bvm}
      - DB_PASSWORD=${DB_PASSWORD:-gk7I712z3feW7jEUxghf4UQM4Z6otDID}
    networks:
      - budget-network
    restart: unless-stopped
    depends_on:
      service-discovery:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  finance-service:
    image: ${DOCKER_USERNAME:-bvm4}/finance-service:latest
    container_name: finance-service
    environment:
      - PORT=8082
      - DEFAULT_ZONE=http://service-discovery:8761/eureka/
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=false
      - EUREKA_INSTANCE_HOSTNAME=finance-service
      # Database configuration
      - DB_URL=${DB_URL:-jdbc:postgresql://dpg-d35vr2qli9vc738ptucg-a.frankfurt-postgres.render.com/employees_db_54tp}
      - DB_USERNAME=${DB_USERNAME:-bvm}
      - DB_PASSWORD=${DB_PASSWORD:-gk7I712z3feW7jEUxghf4UQM4Z6otDID}
      # Kafka configuration
      - KAFKA_HOST=kafka:29092
      - KAFKA_TOPIC=finance-events
    networks:
      - budget-network
    restart: unless-stopped
    depends_on:
      service-discovery:
        condition: service_started
      kafka:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  reporting-service:
    image: ${DOCKER_USERNAME:-bvm4}/reporting-service:latest
    container_name: reporting-service
    environment:
      - PORT=8083
      - DEFAULT_ZONE=http://service-discovery:8761/eureka/
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=false
      - EUREKA_INSTANCE_HOSTNAME=reporting-service
      # Database configuration
      - DB_URL=${DB_URL:-jdbc:postgresql://dpg-d35vr2qli9vc738ptucg-a.frankfurt-postgres.render.com/employees_db_54tp}
      - DB_USERNAME=${DB_USERNAME:-bvm}
      - DB_PASSWORD=${DB_PASSWORD:-gk7I712z3feW7jEUxghf4UQM4Z6otDID}
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Kafka configuration
      - KAFKA_HOST=kafka:29092
      - KAFKA_TOPIC=finance-events
    networks:
      - budget-network
    restart: unless-stopped
    depends_on:
      service-discovery:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    image: ${DOCKER_USERNAME:-bvm4}/api-gateway:latest
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:${API_GATEWAY_PORT:-8080}"
    environment:
      - SPRING_APPLICATION_NAME=API-Gateway
      - PORT=${API_GATEWAY_PORT:-8080}
      - DEFAULT_ZONE=http://service-discovery:8761/eureka/
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=false
      - EUREKA_INSTANCE_HOSTNAME=api-gateway
      # Service URLs (resolved via Eureka)
      - SERVICES_AUTH_URL=http://auth-service
      - SERVICES_FINANCE_URL=http://finance-service
      - SERVICES_REPORT_URL=http://reporting-service
    networks:
      - budget-network
    depends_on:
      service-discovery:
        condition: service_started
      auth-service:
        condition: service_started
      finance-service:
        condition: service_started
      reporting-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT:-8080}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:

networks:
  budget-network:
    driver: bridge